# ======================================================================
# GENERAL

# Requirement(s):
#   * gem install pry
snippet debugger "Ruby-specific interactive debugger." b
# TODO: Remove me!
require 'pry'; binding.pry
endsnippet

# See Also:
#   * https://robots.thoughtbot.com/always-define-respond-to-missing-when-overriding
snippet dynamic_receptor "Always defines respond_to_missing? when overriding method_missing" b
def method_missing(method_name, *args, &block)
	$0
end

def respond_to_missing?(method_name, include_private = false)
	$1
end
endsnippet

# ======================================================================
# SKELETONS

# Requirement(s):
#   * gem install rspec
snippet _spec_helper "Default rspec configurations" b
PROJECT_ROOT = File.expand_path('../..', __FILE__)
$:.unshift PROJECT_ROOT

RSpec.configure do |config|
	config.expect_with :rspec do |expectations|
		expectations.include_chain_clauses_in_custom_matcher_descriptions = true
	end

	config.mock_with :rspec do |mocks|
		mocks.verify_partial_doubles = true
	end
end
endsnippet


# Summary:
#   Use VCR to record and playback HTTP interactions:
#   - https://github.com/vcr/vcr
# Requirement(s):
#   * gem install vcr
#   * gem install webmock
snippet _vcr_config "Default VCR configurations" b
VCR.configure do |config|
	config.cassette_library_dir = 'spec/fixtures/vcr_cassettes'
	config.hook_into :webmock

	# Use `:vcr` metadata to record an HTTP request, or
	# Pass a hash to set the cassette options:
	#		vcr_options = { cassette_name: "example", record: :new_episodes }
	#		describe "Using an options hash", :vcr => vcr_options do
	config.configure_rspec_metadata!
end
endsnippet


# Requirement(s):
#   * gem install activerecord
#   * gem install shoulda_matchers
snippet _activerecord_spec_helper "Speeding Up ActiveRecord Tests -- Corey Haines" b
PROJECT_ROOT = File.expand_path('../..', __FILE__)
$:.unshift PROJECT_ROOT

require 'yaml'
require 'active_record'
require 'shoulda-matchers'

connection_info = YAML.load_file("config/database.yml")["test"]

ActiveRecord::Base.establish_connection(connection_info)

RSpec.configure do |config|
	config.around do |example|
		ActiveRecord::Base.transaction do
			example.run
			raise ActiveRecord::Rollback
		end
	end
end
endsnippet


# ======================================================================
# CUSTOM ASSERTION
#   Create a purpose-built Assertion Method that compares
#   only those attributes of the object that define test-specific equality.

# Important:
# * Do not use this pattern in unit tests:
#   The test should be written in the same level of abstraction everywhere.
snippet domain_assertion "Elevate the test into 'business speak'"
# support/rspec_ext/matchers/symbol_name.rb
RSpec::Matchers.define ${1:symbol_name} do |expected|
	match do |actual|
		${2:boolean}
	end

	failure_message do |actual|
		${3:string}
	end
end
endsnippet
